
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  0000033e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000294  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014c  00000000  00000000  0000066a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000018b  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c6  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cc  00000000  00000000  00000c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00000de6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 12 01 	call	0x224	; 0x224 <main>
  8a:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <config>:


void config(void)
{
	//set portD as input
	DDRD = 0;
  92:	11 ba       	out	0x11, r1	; 17
	//PORTD = 0Xff;
	//set portB and portD as output
	DDRB = 0Xff;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	87 bb       	out	0x17, r24	; 23
	DDRA = 0Xff;
  98:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
  9a:	84 bb       	out	0x14, r24	; 20
	
	//elevator 1 and 2 start at level 1
	PORTB = 0b00000110;
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	88 bb       	out	0x18, r24	; 24
	PORTA = 0b00000110;
  a0:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0b00000000;
  a2:	15 ba       	out	0x15, r1	; 21

	GICR =  (1 << INT0);
  a4:	80 e4       	ldi	r24, 0x40	; 64
  a6:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1<< ISC01) | (1<< ISC00); 
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	85 bf       	out	0x35, r24	; 53
	sei();
  ac:	78 94       	sei
  ae:	08 95       	ret

000000b0 <choose_higher>:
	} 
}

uint8_t choose_higher(void)
{
	if(E[0] >= E[1])
  b0:	20 91 60 00 	lds	r18, 0x0060
  b4:	90 91 61 00 	lds	r25, 0x0061
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	29 17       	cp	r18, r25
  bc:	08 f0       	brcs	.+2      	; 0xc0 <choose_higher+0x10>
  be:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	else
		return 1;
}
  c0:	08 95       	ret

000000c2 <choose_lower>:

uint8_t choose_lower(void)
{
	if(E[0] <= E[1])
  c2:	20 91 60 00 	lds	r18, 0x0060
  c6:	90 91 61 00 	lds	r25, 0x0061
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	92 17       	cp	r25, r18
  ce:	08 f0       	brcs	.+2      	; 0xd2 <choose_lower+0x10>
  d0:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	else
		return 1;
}
  d2:	08 95       	ret

000000d4 <binary2segment>:
	}
}

uint8_t binary2segment(uint8_t binary)
{
	switch(binary)
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	69 f0       	breq	.+26     	; 0xf2 <binary2segment+0x1e>
  d8:	28 f4       	brcc	.+10     	; 0xe4 <binary2segment+0x10>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	41 f0       	breq	.+16     	; 0xee <binary2segment+0x1a>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	81 f0       	breq	.+32     	; 0x102 <binary2segment+0x2e>
  e2:	0d c0       	rjmp	.+26     	; 0xfe <binary2segment+0x2a>
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	39 f0       	breq	.+14     	; 0xf6 <binary2segment+0x22>
  e8:	85 30       	cpi	r24, 0x05	; 5
  ea:	39 f0       	breq	.+14     	; 0xfa <binary2segment+0x26>
  ec:	08 c0       	rjmp	.+16     	; 0xfe <binary2segment+0x2a>
	{
		case 1:
			binary = 0b00000110;
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	08 95       	ret
			break;
		case 2:
			binary = 0b01011011;
			break;
		case 3:
			binary = 0b01001111;
  f2:	8f e4       	ldi	r24, 0x4F	; 79
			break; 
  f4:	08 95       	ret
		case 4:
			binary = 0b01100110;
  f6:	86 e6       	ldi	r24, 0x66	; 102
			break;
  f8:	08 95       	ret
		case 5:
			binary = 0b01101101;
  fa:	8d e6       	ldi	r24, 0x6D	; 109
			break;
  fc:	08 95       	ret
		default:
			binary = 0b01111001;
  fe:	89 e7       	ldi	r24, 0x79	; 121
			break;	
 100:	08 95       	ret
	{
		case 1:
			binary = 0b00000110;
			break;
		case 2:
			binary = 0b01011011;
 102:	8b e5       	ldi	r24, 0x5B	; 91
		default:
			binary = 0b01111001;
			break;	
	}
	return binary;
}
 104:	08 95       	ret

00000106 <go_to>:
	else
		return 1;
}

void go_to(uint8_t elevator, uint8_t level)
{
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	08 2f       	mov	r16, r24
 110:	16 2f       	mov	r17, r22
	while(E[elevator] != level)
 112:	c8 2f       	mov	r28, r24
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	c0 5a       	subi	r28, 0xA0	; 160
 118:	df 4f       	sbci	r29, 0xFF	; 255
 11a:	26 c0       	rjmp	.+76     	; 0x168 <go_to+0x62>
	{
		if(E[elevator] == 7)
 11c:	98 81       	ld	r25, Y
 11e:	97 30       	cpi	r25, 0x07	; 7
 120:	31 f1       	breq	.+76     	; 0x16e <go_to+0x68>
		{
			return; 
		}
		
		if(E[elevator] > level)
 122:	98 81       	ld	r25, Y
 124:	19 17       	cp	r17, r25
 126:	78 f4       	brcc	.+30     	; 0x146 <go_to+0x40>
		{
			E[elevator] --;
 128:	98 81       	ld	r25, Y
 12a:	91 50       	subi	r25, 0x01	; 1
 12c:	98 83       	st	Y, r25
			if (elevator == 0)
 12e:	01 11       	cpse	r16, r1
 130:	05 c0       	rjmp	.+10     	; 0x13c <go_to+0x36>
				PORTB = binary2segment(E[elevator]); 
 132:	88 81       	ld	r24, Y
 134:	0e 94 6a 00 	call	0xd4	; 0xd4 <binary2segment>
 138:	88 bb       	out	0x18, r24	; 24
 13a:	16 c0       	rjmp	.+44     	; 0x168 <go_to+0x62>
			else
				PORTA = binary2segment(E[elevator]); 
 13c:	88 81       	ld	r24, Y
 13e:	0e 94 6a 00 	call	0xd4	; 0xd4 <binary2segment>
 142:	8b bb       	out	0x1b, r24	; 27
 144:	11 c0       	rjmp	.+34     	; 0x168 <go_to+0x62>
		}
		else if (E[elevator] < level)
 146:	98 81       	ld	r25, Y
 148:	91 17       	cp	r25, r17
 14a:	70 f4       	brcc	.+28     	; 0x168 <go_to+0x62>
		{
			E[elevator]++;
 14c:	88 81       	ld	r24, Y
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	88 83       	st	Y, r24
			if (elevator == 0) 
 152:	01 11       	cpse	r16, r1
 154:	05 c0       	rjmp	.+10     	; 0x160 <go_to+0x5a>
				PORTB = binary2segment(E[elevator]); 
 156:	88 81       	ld	r24, Y
 158:	0e 94 6a 00 	call	0xd4	; 0xd4 <binary2segment>
 15c:	88 bb       	out	0x18, r24	; 24
 15e:	04 c0       	rjmp	.+8      	; 0x168 <go_to+0x62>
			else 
				PORTA = binary2segment(E[elevator]);  
 160:	88 81       	ld	r24, Y
 162:	0e 94 6a 00 	call	0xd4	; 0xd4 <binary2segment>
 166:	8b bb       	out	0x1b, r24	; 27
		return 1;
}

void go_to(uint8_t elevator, uint8_t level)
{
	while(E[elevator] != level)
 168:	98 81       	ld	r25, Y
 16a:	91 13       	cpse	r25, r17
 16c:	d7 cf       	rjmp	.-82     	; 0x11c <go_to+0x16>
				PORTB = binary2segment(E[elevator]); 
			else 
				PORTA = binary2segment(E[elevator]);  
		}
	}
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <up_down>:
	
}

int up_down(void)
{
	direction = (PIND & 0b00000011); 
 178:	80 b3       	in	r24, 0x10	; 16
 17a:	83 70       	andi	r24, 0x03	; 3
 17c:	80 93 63 00 	sts	0x0063, r24
	switch(direction)
 180:	80 91 63 00 	lds	r24, 0x0063
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	19 f0       	breq	.+6      	; 0x18e <up_down+0x16>
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	59 f0       	breq	.+22     	; 0x1a2 <up_down+0x2a>
 18c:	14 c0       	rjmp	.+40     	; 0x1b6 <up_down+0x3e>
	{
		case 1: 
			go_to(usedelvator = choose_lower(), 1);
 18e:	0e 94 61 00 	call	0xc2	; 0xc2 <choose_lower>
 192:	80 93 62 00 	sts	0x0062, r24
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	0e 94 83 00 	call	0x106	; 0x106 <go_to>
			return 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	08 95       	ret
		case 2:	
			go_to(usedelvator = choose_higher(),5);
 1a2:	0e 94 58 00 	call	0xb0	; 0xb0 <choose_higher>
 1a6:	80 93 62 00 	sts	0x0062, r24
 1aa:	65 e0       	ldi	r22, 0x05	; 5
 1ac:	0e 94 83 00 	call	0x106	; 0x106 <go_to>
			return 1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret
		default:
			return 0;	
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
	} 
}
 1ba:	08 95       	ret

000001bc <levels>:

void levels(void)
{
	while(1)
	{
		if((PIND & 0b11111000) != 0)
 1bc:	80 b3       	in	r24, 0x10	; 16
 1be:	88 7f       	andi	r24, 0xF8	; 248
 1c0:	e9 f3       	breq	.-6      	; 0x1bc <levels>
		{
			level2go = ((PIND & 0b00001000) >> 3) + ((PIND & 0b00010000) >> 3) + ((PIND & 0b00100000) >> 5) * 3 + ((PIND & 0b01000000) >> 6) * 4 + ((PIND & 0b10000000) >> 7) * 5;
 1c2:	70 b3       	in	r23, 0x10	; 16
 1c4:	20 b3       	in	r18, 0x10	; 16
 1c6:	50 b3       	in	r21, 0x10	; 16
 1c8:	40 b3       	in	r20, 0x10	; 16
 1ca:	60 b3       	in	r22, 0x10	; 16
 1cc:	73 fb       	bst	r23, 3
 1ce:	77 27       	eor	r23, r23
 1d0:	70 f9       	bld	r23, 0
 1d2:	20 71       	andi	r18, 0x10	; 16
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	c9 01       	movw	r24, r18
 1d8:	95 95       	asr	r25
 1da:	87 95       	ror	r24
 1dc:	95 95       	asr	r25
 1de:	87 95       	ror	r24
 1e0:	95 95       	asr	r25
 1e2:	87 95       	ror	r24
 1e4:	87 0f       	add	r24, r23
 1e6:	26 2f       	mov	r18, r22
 1e8:	22 1f       	adc	r18, r18
 1ea:	22 27       	eor	r18, r18
 1ec:	22 1f       	adc	r18, r18
 1ee:	92 2f       	mov	r25, r18
 1f0:	99 0f       	add	r25, r25
 1f2:	99 0f       	add	r25, r25
 1f4:	29 0f       	add	r18, r25
 1f6:	82 0f       	add	r24, r18
 1f8:	56 fb       	bst	r21, 6
 1fa:	33 27       	eor	r19, r19
 1fc:	30 f9       	bld	r19, 0
 1fe:	33 0f       	add	r19, r19
 200:	33 0f       	add	r19, r19
 202:	83 0f       	add	r24, r19
 204:	45 fb       	bst	r20, 5
 206:	99 27       	eor	r25, r25
 208:	90 f9       	bld	r25, 0
 20a:	29 2f       	mov	r18, r25
 20c:	22 0f       	add	r18, r18
 20e:	92 0f       	add	r25, r18
 210:	98 0f       	add	r25, r24
 212:	90 93 64 00 	sts	0x0064, r25
			go_to(usedelvator, level2go);
 216:	60 91 64 00 	lds	r22, 0x0064
 21a:	80 91 62 00 	lds	r24, 0x0062
 21e:	0e 94 83 00 	call	0x106	; 0x106 <go_to>
 222:	08 95       	ret

00000224 <main>:

 
int main(void)
{
	
	config();
 224:	0e 94 49 00 	call	0x92	; 0x92 <config>
    while(1)
    {
		if(up_down())
 228:	0e 94 bc 00 	call	0x178	; 0x178 <up_down>
 22c:	89 2b       	or	r24, r25
 22e:	e1 f3       	breq	.-8      	; 0x228 <main+0x4>
		{
			levels();
 230:	0e 94 de 00 	call	0x1bc	; 0x1bc <levels>
 234:	f9 cf       	rjmp	.-14     	; 0x228 <main+0x4>

00000236 <omg>:
	omg();
}

void omg(void)
{
	if(usedelvator)
 236:	80 91 62 00 	lds	r24, 0x0062
 23a:	88 23       	and	r24, r24
 23c:	21 f0       	breq	.+8      	; 0x246 <omg+0x10>
		PORTC |= 0b11110000; 
 23e:	85 b3       	in	r24, 0x15	; 21
 240:	80 6f       	ori	r24, 0xF0	; 240
 242:	85 bb       	out	0x15, r24	; 21
 244:	03 c0       	rjmp	.+6      	; 0x24c <omg+0x16>
	else
		PORTC |= 0b00001111; 
 246:	85 b3       	in	r24, 0x15	; 21
 248:	8f 60       	ori	r24, 0x0F	; 15
 24a:	85 bb       	out	0x15, r24	; 21
	E[usedelvator] = 7;
 24c:	e0 91 62 00 	lds	r30, 0x0062
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	e0 5a       	subi	r30, 0xA0	; 160
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	80 83       	st	Z, r24
 25a:	08 95       	ret

0000025c <__vector_1>:
	}	
	
}

ISR(INT0_vect)
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	2f 93       	push	r18
 268:	3f 93       	push	r19
 26a:	4f 93       	push	r20
 26c:	5f 93       	push	r21
 26e:	6f 93       	push	r22
 270:	7f 93       	push	r23
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	af 93       	push	r26
 278:	bf 93       	push	r27
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
	omg();
 27e:	0e 94 1b 01 	call	0x236	; 0x236 <omg>
}
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
